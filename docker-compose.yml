# Versión de docker-compose
version: '3.8'

# Este archivo orquesta múltiples contenedores
services:
  # Servicio de base de datos
  db:
    image: postgres:15-alpine   # imagen de PostgreSQL
    container_name: inventorypro_db
    environment:
      POSTGRES_DB: inventorypro
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: developer
    volumes:
      - postgres_data:/var/lib/postgresql/data # persistencia de datos
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Servicio de Django (backend)
  backend:
    build: ./myapi
    container_name: inventorypro_backend
    environment:
      DEBUG: "True"
      DB_NAME: inventorypro
      DB_USER: postgres
      DB_PASSWORD: developer
      DB_HOST: db
      DB_PORT: "5432"
    ports:
      - "8000:8000"
    volumes:
      - ./myapi:/app             # montar el código
      - /app/__pycache__         # ignorar el cache
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

  # Servicio de React (frontend)
  frontend:
    build: ./frontend
    container_name: inventorypro_frontend
    ports:
      - "3000:80"                 # 80 interno → 3000 externo
    volumes:
      - ./frontend:/app           # montar código
      - /app/node_modules         # ignorar node_modules
    depends_on:
      - backend
    restart: unless-stopped

# Volúmenes para persistencia
volumes:
  postgres_data:
    driver: local
